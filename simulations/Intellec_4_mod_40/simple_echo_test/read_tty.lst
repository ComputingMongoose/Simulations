                        ; from https://www.retrotechnology.com/restore/4040_robson.lst
                        ; requires constants.asm for defining register pseudonims
                        
                                 	RPAIRS  "ZERO7"
   0000                          	ORG     0h
                                  INCL    "constants.asm"
                        ; useful Intel 4004 4040 equates for instruction mnemonics HRJ Jul 26 2020
                        ; thanks also to Dwight Elvey in 2019 and 2020
                        
                        ;register pairs - A04 assembler assumes 0-7 values to designate pairs
                        ; In the A04 assembler, instructions SRC JIN FIN FIM, assume a value 
                        ; only 0 through 7 inclusive; otherwise it's an error. That value if acceptable,
                        ; becomes three bits, which are inserted into the appropriate three bits
                        ; of one of those instructions, to complete the instruction code value. 
                        
   0000                 R01	EQU	00
   0001                 R23	EQU	01
   0002                 R45	EQU	02
   0003                 R67	EQU	03
   0004                 R89	EQU	04
   0005                 RAB	EQU	05
   0006                 RCD	EQU	06
   0007                 REF	EQU	07
                        
   0000                 R0R1	EQU	00
   0001                 R2R3	EQU	01
   0002                 R4R5	EQU	02
   0003                 R6R7	EQU	03
   0004                 R8R9	EQU	04
                        
   0000                 r0r1	EQU	00
   0001                 r2r3	EQU	01
   0002                 r4r5	EQU	02
   0003                 r6r7	EQU	03
   0004                 r8r9	EQU	04
                        
                        ; The Intel MCS-04 manual says its assembler supports the following symbols
                        ; but wants EVEN values 0 2 4 6 .. 14 for these register pairs symbols.
                        ; I've assigned them values consistent with A04 as noted above.
                        
   0000                 P0	EQU	00
   0001                 P1	EQU	01
   0002                 P2	EQU	02
   0003                 P3	EQU	03
   0004                 P4	EQU	04
   0005                 P5	EQU	05
   0006                 P6	EQU	06
   0007                 P7	EQU	07
                        
                        ;single resister symbols. A04 only accepts 0-15 for a single register value.
                        
   0000                 R0	EQU	0
   0001                 R1	EQU	1
   0002                 R2	EQU	2
   0003                 R3	EQU	3
   0004                 R4	EQU	4
   0005                 R5	EQU	5
   0006                 R6	EQU	6
   0007                 R7	EQU	7
   0008                 R8	EQU	8
   0009                 R9	EQU	9
   000a                 RA	EQU	10
   000b                 RB	EQU	11
   000c                 RC	EQU	12
   000d                 RD	EQU	13
   000e                 RE	EQU	14
   000f                 RF	EQU	15
                        
   0000                 r0	EQU	0
   0001                 r1	EQU	1
   0002                 r2	EQU	2
   0003                 r3	EQU	3
   0004                 r4	EQU	4
   0005                 r5	EQU	5
   0006                 r6	EQU	6
   0007                 r7	EQU	7
   0008                 r8	EQU	8
   0009                 r9	EQU	9
   000a                 ra	EQU	10
   000b                 rb	EQU	11
   000c                 rc	EQU	12
   000d                 rd	EQU	13
   000e                 re	EQU	14
   000f                 rf	EQU	15
                        
                        ;JCN condition codes (JCN NC addr, etc.) A04 accepts a value 0-15.
                        ;these symbols courtesy Dwight Elvey
                        
   0001                 T0	EQU	$1 ;test = 0
   0002                 C	EQU	$2 ;carry = 1
   0003                 CT0	equ	$3 ; carry = 1 or test = 0
   0004                 Z	EQU	$4 ; acc = 0
   0005                 ZT0	EQU	$5 ; acc=0 or test = 0
   0006                 ZC	EQU	$6 ; acc= 0 or carry = 1
   0007                 ZCT0	EQU	$7 ; acc=0 or carry = 1 or test = 0
   0009                 NT0	EQU	$9 ; Test = 1
   000a                 NC	EQU	$A ; carry = 0
   000b                 NCT0	EQU	$B ; not  ( carry = 1 or is test = 0 )
   000c                 NZ	EQU	$C ; acc <> 0
   000d                 NZT0	EQU	$D ; not ( acc = 0 or test = 0 )
   000e                 NZC	EQU	$E ; not ( acc=0 or carry = 1 )
   000f                 NZCT0	EQU	$F ; not ( acc=0 or carry=1 or test=0 )
                        ; JCN 0 -> jump never, JCN 8 -> jump always
                        
   0001                 t0	EQU	$1 ;test = 0
   0002                 c	EQU	$2 ;carry = 1
   0003                 ct0	equ	$3 ; carry = 1 or test = 0
   0004                 z	EQU	$4 ; acc = 0
   0005                 zt0	EQU	$5 ; acc=0 or test = 0
   0006                 zc	EQU	$6 ; acc= 0 or carry = 1
   0007                 zct0	EQU	$7 ; acc=0 or carry = 1 or test = 0
   0009                 nt0	EQU	$9 ; Test = 1
   000a                 nc	EQU	$A ; carry = 0
   000b                 nct0	EQU	$B ; not  ( carry = 1 or is test = 0 )
   000c                 nz	EQU	$C ; acc <> 0
   000d                 nzt0	EQU	$D ; not ( acc = 0 or test = 0 )
   000e                 nzc	EQU	$E ; not ( acc=0 or carry = 1 )
   000f                 nzct0	EQU	$F ; not ( acc=0 or carry=1 or test=0 )
                        
                        
                        ;alternative JCN condition codes
                        
   0004                 ZAC  EQU $4  ;jump on zero accum  
   000c                 NZAC EQU $C  ;jump on not zero accum
   000a                 ZCY  EQU $A  ;jump on zero carry 
   0002                 NZCY EQU $2  ;jump on not zero carry
   0001                 ZTS  EQU $1  ;jump on zero test   
   0009                 NZTS EQU $9  ;jump on not zero test
                        
                        
                        
                        
   0000                 START:
   0000   50 03                     jms InputTTYR2
   0002   01                        hlt
                        
   0003                 InputTTYR2:
   0003   f0                        clb                                   ; Clear both carry and Accumulator. 0 selects TTY (1 from elsewhere selects Tape Reader ?)
   0004                 InputAlternate:
   0004   26 40                     fim r6r7,40h                          ; Set SRC to 01:00:0000 e.g. RAM Chip 1,Register 0,Address 0
   0006   27                        src r6r7
   0007   e1                        wmp                                   ; Write device select there.
   0008   d8                        ldm 8                                 ; set the counter to -8, we want to read 8 bits.
   0009   b4                        xch r4
   000a   50 3f                     jms SetRAMUnit0_0                     ; Back to RAM Unit 0,0 
   000c                 ReadTTYWait:
   000c   ea                        rdr                                   ; Read the I/O port
   000d   f6                        rar                                   ; Shift bit 0 into carry.
   000e   1a 0c                     jcn nc,ReadTTYWait                       ; If bit 0 was clear then wait for character to be received
   0010   50 38                     jms DelayBaudRateHalf                 ; wait half a pulse, so you are reading in the middle of the pulse.
   0012   27                        src r6r7                              ; write 1 into 01:00 I/O port bit 0.
   0013   e1                        wmp
   0014   21                        src r0r1                              ; back to 00:00 
   0015   e1                        wmp                                   ; write '1' there (e.g. the start bit of the echo)
   0016                 ReadTTYLoop:
   0016   50 32                     jms DelayBaudRate                     ; wait till the middle of the next pulse
   0018   ea                        rdr                                   ; read the I/O line
   0019   f4                        cma                                   ; invert it (active low ?)
   001a   e1                        wmp                                   ; and write it back for the echo
   001b   f6                        rar                                   ; shift it into R2,R3
   001c   a2                        ld r2                                 ; again the least significant bit will be first as it's
   001d   f6                        rar
   001e   b2                        xch r2
   001f   a3                        ld r3
   0020   f6                        rar
   0021   b3                        xch r3
   0022   74 16                     isz r4,ReadTTYLoop                    ; do it 8 times
   0024   50 32                     jms DelayBaudRate                     ; wait middle of next pulse
   0026   d1                        ldm 1                                 ; set o/p so echoing stop bit.
   0027   e1                        wmp
   0028   50 32                     jms DelayBaudRate                     ; do the long stop bit, skip over receiving it as we don't need to
   002a   50 38                     jms DelayBaudRateHalf
   002c   b2                        xch r2                                ; rotate a zero right into R2, e.g. clear the most significant bit
   002d   f5                        ral
   002e   f1                        clc
   002f   f6                        rar
   0030   b2                        xch r2
   0031   c0                        bbl 0                                 ; and exit.
                        
   00f3                 delayCount equ 0f3h                               ; Frequency is loop x 2 x 2 / 10.8us    
   0032                 DelayBaudRate:
   0032   20 f3                     fim r0r1,delayCount                   ; number chosen to set effective BAUD rate
   0034                 DBRLoop1:                                         
   0034   71 34                     isz r1,DBRLoop1                       ; this one is done 13 times (26 cycles)
   0036   70 34                     isz r0,DBRLoop1                       ; this one once, so that makes 28 cycles + 2 for FIM
                        
   0038                 DelayBaudRateHalf:
   0038   20 f3                     fim r0r1,delayCount                   ; as above. 
   003a                 DBRLoop2:                                         
   003a   71 3a                     isz r1,DBRLoop2                       
   003c   70 3a                     isz r0,DBRLoop2
   003e   c0                        bbl 0
                        
   003f                 SetRAMUnit0_0:
   003f   20 00                     fim r0r1,00h                           ; Load 0 into R0,R1
   0041   21                        src r0r1                              ; Set as default output (chip 0, register 0, address 0)
   0042   c0                        bbl 0                                 ; return.
                        
   0000                           END START
0002  C             0003  CT0           0034  DBRLoop1      003a  DBRLoop2  
0032  DelayBaudRate    0038  DelayBaudRateHalf    0004  InputAlternate    0003  InputTTYR2
000a  NC            000b  NCT0          0009  NT0           000c  NZ        
000c  NZAC          000e  NZC           000f  NZCT0         0002  NZCY      
000d  NZT0          0009  NZTS          0000  P0            0001  P1        
0002  P2            0003  P3            0004  P4            0005  P5        
0006  P6            0007  P7            0000  R0            0000  R01       
0000  R0R1          0001  R1            0002  R2            0001  R23       
0001  R2R3          0003  R3            0004  R4            0002  R45       
0002  R4R5          0005  R5            0006  R6            0003  R67       
0003  R6R7          0007  R7            0008  R8            0004  R89       
0004  R8R9          0009  R9            000a  RA            0005  RAB       
000b  RB            000c  RC            0006  RCD           000d  RD        
000e  RE            0007  REF           000f  RF            0016  ReadTTYLoop
000c  ReadTTYWait    0000  START         003f  SetRAMUnit0_0    0001  T0        
0004  Z             0004  ZAC           0006  ZC            0007  ZCT0      
000a  ZCY           0005  ZT0           0001  ZTS           0002  c         
0003  ct0           00f3  delayCount    000a  nc            000b  nct0      
0009  nt0           000c  nz            000e  nzc           000f  nzct0     
000d  nzt0          0000  r0            0000  r0r1          0001  r1        
0002  r2            0001  r2r3          0003  r3            0004  r4        
0002  r4r5          0005  r5            0006  r6            0003  r6r7      
0007  r7            0008  r8            0004  r8r9          0009  r9        
000a  ra            000b  rb            000c  rc            000d  rd        
000e  re            000f  rf            0001  t0            0004  z         
0006  zc            0007  zct0          0005  zt0           
